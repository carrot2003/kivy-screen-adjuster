# 工作流名称：自动构建Android APK
name: 自动构建Android APK

# 触发条件：代码推送到main分支时自动执行
on:
  push:
    branches: [ main ]

# 定义打包任务
jobs:
  build-apk:
    runs-on: ubuntu-latest  # 使用Ubuntu环境（Buildozer最佳兼容）

    steps:
      # 步骤1：拉取仓库代码
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      # 步骤2：配置Python 3.10环境（兼容Kivy和Buildozer）
      - name: 2. 安装Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'  # 缓存pip依赖加速构建
          cache-dependency-path: ''  # 禁用依赖配置文件检查

      # 步骤3：安装Buildozer及所有必要依赖（包含Cython）
      - name: 3. 安装Buildozer与依赖库
        run: |
          python -m pip install --upgrade pip
          # 安装核心依赖（Cython是Buildozer编译必需的）
          pip install buildozer cython pillow
          # 安装Android构建额外依赖
          sudo apt-get update
          sudo apt-get install -y \
            openjdk-11-jdk \
            zlib1g-dev \
            libncurses5-dev \
            libgdbm-dev \
            libnss3-dev \
            libssl-dev \
            libreadline-dev \
            libffi-dev \
            wget

      # 步骤4：构建APK（使用国内镜像加速SDK/NDK下载）
      - name: 4. 构建Android APK
        run: |
          buildozer android debug
        env:
          # 配置国内镜像加速（解决下载超时问题）
          ANDROID_SDK_URL: https://mirrors.tuna.tsinghua.edu.cn/android/sdk/
          ANDROID_NDK_URL: https://mirrors.tuna.tsinghua.edu.cn/android/ndk/
          # 强制使用Python 3.10
          PYTHONPATH: /opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages

      # 步骤5：上传APK产物（使用最新版上传插件）
      - name: 5. 上传APK到GitHub
        uses: actions/upload-artifact@v4
        with:
          name: 屏幕调整工具APK
          path: bin/*.apk
