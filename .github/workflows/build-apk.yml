# 工作流名称：描述这个Action的作用
name: 自动构建Android APK

# 触发条件：当代码推送到main分支时，自动执行打包
on:
  push:
    branches: [ main ]

# 定义打包任务
jobs:
  build-apk:
    runs-on: ubuntu-latest  # 选择Linux环境（对Buildozer兼容性最好）

    steps:
      # 步骤1：拉取仓库代码到打包服务器
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      # 步骤2：配置Python 3.10环境（兼容Kivy和Buildozer）
      - name: 2. 安装Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'  # 缓存pip依赖加速构建
          cache-dependency-path: ''  # 禁用“必须有requirements.txt/pyproject.toml”的检查

      # 步骤3：安装Buildozer及项目依赖
      - name: 3. 安装Buildozer与依赖库
        run: |
          python -m pip install --upgrade pip
          pip install buildozer  # 安装Buildozer
          pip install pillow     # 安装图片处理库（处理example.jpg需要）

      # 步骤4：执行Buildozer打包命令（自动下载SDK/NDK）
      - name: 4. 构建Android APK
        run: |
          buildozer android debug

      # 步骤5：上传生成的APK（供下载）
      - name: 5. 上传APK到GitHub
        uses: actions/upload-artifact@v4  # 使用最新版上传插件
        with:
          name: 屏幕调整工具APK  # 下载时的压缩包名称
          path: bin/*.apk        # APK默认生成在bin目录下
