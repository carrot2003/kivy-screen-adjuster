name: 自动构建Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 延长超时（编译依赖库耗时增加）
    env:
      ANDROID_SDK_ROOT: "/home/runner/.buildozer/android/platform/android-sdk"
      ANDROID_NDK_VERSION: "25b"
      CMDLINE_VERSION: "9477386"

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 2. 安装Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.18'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements.txt
            .github/workflows/*.yml

      - name: 3. 安装系统依赖（补充编译工具链）
        run: |
          sudo apt-get update -y
          # 核心修复：添加 libtool/autoconf/automake（编译libffi必需）
          sudo apt-get install -y \
            openjdk-11-jdk \
            unzip \
            wget \
            ca-certificates \
            libssl-dev \
            libtool \  # 解决LT_SYS_SYMBOL_USCORE宏缺失
            autoconf \ # 处理旧版宏警告
            automake   # 补充编译链工具
          sudo update-ca-certificates
          # 验证工具安装成功
          libtool --version || echo "libtool未安装"
          autoconf --version || echo "autoconf未安装"
          java -version
          javac -version

      - name: 4. 安装Buildozer与依赖
        run: |
          python -m pip install --upgrade pip==25.2
          pip install \
            buildozer==1.5.0 \
            cython==3.1.3 \
            pillow==11.3.0 \
            pexpect==4.9.0 \
            sh==1.14.3
          buildozer --version
          cython --version

      - name: 5. 配置Java 11环境
        uses: actions/setup-java@v4
        with:
          java-version: '11.0.28'
          distribution: 'temurin'
          java-package: 'jdk'
        env:
          JAVA_HOME: "/usr/lib/jvm/temurin-11-jdk-amd64"

      - name: 6. 下载并配置Android SDK（创建sdkmanager软链接）
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          sudo chmod -R 777 $ANDROID_SDK_ROOT
          echo "SDK根路径：$ANDROID_SDK_ROOT"

          # 下载cmdline-tools
          CMDLINE_ZIP="commandlinetools-linux-${CMDLINE_VERSION}_latest.zip"
          MIRRORS=(
            "https://mirrors.ustc.edu.cn/android/repository/"
            "https://mirrors.aliyun.com/android/repository/"
            "https://dl.google.com/android/repository/"
          )
          for MIRROR in "${MIRRORS[@]}"; do
            echo "尝试从镜像下载：$MIRROR$CMDLINE_ZIP"
            if wget --no-check-certificate -O cmdline-tools.zip "$MIRROR$CMDLINE_ZIP"; then
              echo "从$MIRROR下载成功！"
              break
            fi
          done
          unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools/tmp
          mv $ANDROID_SDK_ROOT/cmdline-tools/tmp/*/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
          rm -rf cmdline-tools.zip $ANDROID_SDK_ROOT/cmdline-tools/tmp

          # 下载JAXB库
          JAXB_LIBS_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest/lib/jaxb"
          mkdir -p $JAXB_LIBS_DIR
          wget --no-check-certificate -O $JAXB_LIBS_DIR/jaxb-api.jar "https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar"
          wget --no-check-certificate -O $JAXB_LIBS_DIR/jaxb-core.jar "https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar"
          wget --no-check-certificate -O $JAXB_LIBS_DIR/jaxb-impl.jar "https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-impl-2.3.0.1.jar"

          # 接受许可证
          SDK_JAR="$ANDROID_SDK_ROOT/cmdline-tools/latest/lib/sdkmanager-classpath.jar"
          JAXB_JARS="$JAXB_LIBS_DIR/jaxb-api.jar:$JAXB_LIBS_DIR/jaxb-core.jar:$JAXB_LIBS_DIR/jaxb-impl.jar"
          FULL_CLASSPATH="$SDK_JAR:$JAXB_JARS"
          export JAVA_HOME="/usr/lib/jvm/temurin-11-jdk-amd64"
          yes | java -cp $FULL_CLASSPATH com.android.sdklib.tool.sdkmanager.SdkManagerCli \
            --sdk_root=$ANDROID_SDK_ROOT \
            --licenses

          # 安装SDK组件
          java -cp $FULL_CLASSPATH com.android.sdklib.tool.sdkmanager.SdkManagerCli \
            --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" \
            "build-tools;31.0.0" \
            "platforms;android-31"

          # 创建sdkmanager软链接
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager
          if [ -L "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" ] && [ -e "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" ]; then
            echo "✅ sdkmanager软链接创建成功"
          else
            echo "❌ sdkmanager软链接创建失败"
            exit 1
          fi

          # 验证组件
          echo "=== SDK验证 ==="
          [ -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ] && echo "✅ Build Tools" || { echo "❌ Build Tools"; exit 1; }
          [ -d "$ANDROID_SDK_ROOT/platform-tools" ] && echo "✅ platform-tools" || { echo "❌ platform-tools"; exit 1; }

      - name: 7. 构建APK（详细日志）
        run: |
          export JAVA_HOME="/usr/lib/jvm/temurin-11-jdk-amd64"
          export PATH="$JAVA_HOME/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          # 显式指定NDK镜像（加速下载）
          export ANDROID_NDK_URL="https://mirrors.tuna.tsinghua.edu.cn/android/ndk/android-ndk-r${ANDROID_NDK_VERSION}-linux.zip"
          
          # 编译时显示详细日志，便于排查依赖问题
          buildozer android debug --log-level 2 \
            --android-sdk "$ANDROID_SDK_ROOT" \
            --android-ndk "$ANDROID_SDK_ROOT/../android-ndk-r${ANDROID_NDK_VERSION}"

      - name: 8. 上传产物（含日志）
        uses: actions/upload-artifact@v4
        with:
          name: 屏幕调整工具APK（含日志）
          path: |
            bin/*.apk
            .buildozer/logs/*.log
          retention-days: 14
        if: always()
