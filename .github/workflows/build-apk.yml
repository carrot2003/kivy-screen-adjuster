name: 自动构建Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 预留足够编译时间
    env:
      ANDROID_SDK_ROOT: "/home/runner/.buildozer/android/platform/android-sdk"
      ANDROID_NDK_VERSION: "25b"
      CMDLINE_VERSION: "9477386"

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 2. 安装Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.18'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements.txt
            .github/workflows/*.yml

      - name: 3. 安装系统依赖（修复APT命令格式）
        run: |
          # 关键修复：简化命令格式，确保包名无多余空格/字符
          sudo apt-get update -y
          # 直接用空格分隔包名，避免反斜杠换行导致的格式错误
          sudo apt-get install -y openjdk-11-jdk unzip wget ca-certificates libssl-dev libtool autoconf automake
          # 验证核心工具是否安装成功
          echo "=== 工具安装验证 ==="
          libtool --version >/dev/null 2>&1 && echo "✅ libtool 安装成功" || { echo "❌ libtool 安装失败"; exit 1; }
          autoconf --version >/dev/null 2>&1 && echo "✅ autoconf 安装成功" || { echo "❌ autoconf 安装失败"; exit 1; }
          automake --version >/dev/null 2>&1 && echo "✅ automake 安装成功" || { echo "❌ automake 安装失败"; exit 1; }
          java -version && javac -version

      - name: 4. 安装Buildozer与依赖
        run: |
          python -m pip install --upgrade pip==25.2
          pip install buildozer==1.5.0 cython==3.1.3 pillow==11.3.0 pexpect==4.9.0 sh==1.14.3
          buildozer --version && cython --version

      - name: 5. 配置Java 11环境
        uses: actions/setup-java@v4
        with:
          java-version: '11.0.28'
          distribution: 'temurin'
          java-package: 'jdk'
        env:
          JAVA_HOME: "/usr/lib/jvm/temurin-11-jdk-amd64"

      - name: 6. 下载并配置Android SDK
        run: |
          # 创建标准目录
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          sudo chmod -R 777 $ANDROID_SDK_ROOT
          echo "SDK路径：$ANDROID_SDK_ROOT"

          # 下载cmdline-tools
          CMDLINE_ZIP="commandlinetools-linux-${CMDLINE_VERSION}_latest.zip"
          MIRRORS=("https://mirrors.ustc.edu.cn/android/repository/" "https://mirrors.aliyun.com/android/repository/" "https://dl.google.com/android/repository/")
          for MIRROR in "${MIRRORS[@]}"; do
            echo "尝试下载：$MIRROR$CMDLINE_ZIP"
            if wget --no-check-certificate -O cmdline-tools.zip "$MIRROR$CMDLINE_ZIP"; then
              echo "下载成功！"
              break
            fi
          done
          unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools/tmp
          mv $ANDROID_SDK_ROOT/cmdline-tools/tmp/*/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
          rm -rf cmdline-tools.zip $ANDROID_SDK_ROOT/cmdline-tools/tmp

          # 下载JAXB库
          JAXB_DIR="$ANDROID_SDK_ROOT/cmdline-tools/latest/lib/jaxb"
          mkdir -p $JAXB_DIR
          wget --no-check-certificate -O $JAXB_DIR/jaxb-api.jar "https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar"
          wget --no-check-certificate -O $JAXB_DIR/jaxb-core.jar "https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar"
          wget --no-check-certificate -O $JAXB_DIR/jaxb-impl.jar "https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-impl-2.3.0.1.jar"

          # 接受许可证+安装SDK组件
          SDK_JAR="$ANDROID_SDK_ROOT/cmdline-tools/latest/lib/sdkmanager-classpath.jar"
          JAXB_JARS="$JAXB_DIR/jaxb-api.jar:$JAXB_DIR/jaxb-core.jar:$JAXB_DIR/jaxb-impl.jar"
          export JAVA_HOME="/usr/lib/jvm/temurin-11-jdk-amd64"
          yes | java -cp "$SDK_JAR:$JAXB_JARS" com.android.sdklib.tool.sdkmanager.SdkManagerCli --sdk_root=$ANDROID_SDK_ROOT --licenses
          java -cp "$SDK_JAR:$JAXB_JARS" com.android.sdklib.tool.sdkmanager.SdkManagerCli --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "build-tools;31.0.0" "platforms;android-31"

          # 创建sdkmanager软链接
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager
          [ -L "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" ] && echo "✅ sdkmanager软链接成功" || { echo "❌ 软链接失败"; exit 1; }

          # 验证SDK组件
          [ -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ] && echo "✅ Build Tools就绪" || { echo "❌ Build Tools缺失"; exit 1; }
          [ -d "$ANDROID_SDK_ROOT/platform-tools" ] && echo "✅ platform-tools就绪" || { echo "❌ platform-tools缺失"; exit 1; }

      - name: 7. 构建APK
        run: |
          export JAVA_HOME="/usr/lib/jvm/temurin-11-jdk-amd64"
          export PATH="$JAVA_HOME/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          export ANDROID_NDK_URL="https://mirrors.tuna.tsinghua.edu.cn/android/ndk/android-ndk-r${ANDROID_NDK_VERSION}-linux.zip"
          
          # 详细日志模式，便于排查编译问题
          buildozer android debug --log-level 2 \
            --android-sdk "$ANDROID_SDK_ROOT" \
            --android-ndk "$ANDROID_SDK_ROOT/../android-ndk-r${ANDROID_NDK_VERSION}"

      - name: 8. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 屏幕调整工具APK（含日志）
          path: |
            bin/*.apk
            .buildozer/logs/*.log
          retention-days: 14
        if: always()
